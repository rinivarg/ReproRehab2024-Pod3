thm = theme(
strip.text.x=element_text(size=20,face="bold"),
strip.text.y=element_text(size=20,face="bold"),
legend.text=element_text(size=16,face="bold"),
legend.position = "top",
legend.title=element_text(size=16,face="bold"),
title =element_text(size=14, face='bold'),
text = element_text(colour = "black",size=18),
plot.title = element_text(colour = "black",size = 22, face = "bold"),
axis.ticks.length = unit(0.3,"cm"),
axis.line = element_line(colour = "black",size=0.85),
axis.ticks = element_line(colour = "black",size=0.85),
axis.text = element_text(colour = "black",size=24),
axis.title=element_text(size=25))
rm(list=ls())
ReqdLibs = c("here","purrr","readxl","Hmisc","chron","ggplot2","ggthemes","dplyr")
invisible(lapply(ReqdLibs, library, character.only = TRUE))
folder_path = here("Materials/Week 2/R project", "Raw Data")
# output the folder name
print(folder_path)
# make sure it exists
dir.exists(folder_path)
subfolder_path = here(folder_path,'Sub1')
files.test=list.files(subfolder_path)
files.test
#Let's read in one file to see how ugly the data are
temp0=suppressMessages(read_excel(here(subfolder_path,files.test[1]),))
head(temp0)
temp=suppressMessages(read_excel(here(subfolder_path,files.test[1]),range = cell_cols("J:O")))
head(temp)
# the first two rows are header-like information so remove it
temp=temp[-c(1,2),-2]
head(temp)
dir.list = dir(folder_path)
dir.list
data.all = data.frame(list())
for(i in 1:length(dir.list)){
files.import=list.files(here(folder_path,dir.list[i]))
for(j in 1:length(files.import)){
#Give me only the rows I need
temp=suppressMessages(read_excel(here(folder_path,dir.list[i],files.import[j]),
range = cell_cols("J:O")))
#Remove the random stuff
temp=temp[-c(1,2),-2]
#Convert to numeric
temp[,c(2:5)]=apply(temp[,c(2:5)],2,as.numeric)
#Covert to seconds
temp$t=seconds(times(temp$t))+(minutes(times(temp$t))*60)
#Assign Sub id
temp$Sub=dir.list[i]
#Assign trial id
if(nchar(files.import[j])<16){
temp$trial="rest"
}else{
temp$trial=paste("trial",as.numeric(substr(files.import[j],nchar(files.import[j])-5,nchar(files.import[j])-5)))
}
# this final step is where the 'stacking' happens
data.all=rbind(data.all,temp)
}
}
head(data.all)
dim(data.all)
data.all <- map_df(dir.list, function(dir_name) {
# List all files in the current directory
files.import <- list.files(here(folder_path, dir_name))
map_df(files.import, function(file_name) {
# Read the Excel file
temp <- suppressMessages(read_excel(here(folder_path, dir_name, file_name), range = cell_cols("J:O")))
# Clean the data
temp <- temp[-c(1, 2), -2]
temp[, 2:5] <- apply(temp[, 2:5], 2, as.numeric)
# Convert time to seconds
temp$t <- seconds(times(temp$t)) + (minutes(times(temp$t)) * 60)
# Assign Sub id
temp$Sub <- dir_name
# Assign trial id
temp$trial <- ifelse(nchar(file_name) < 16, "rest", paste("trial", as.numeric(substr(file_name, nchar(file_name) - 5, nchar(file_name) - 5))))
return(temp)
})
})
# Now data.all contains all the processed data
head(data.all)
dim(data.all)
data.all <- map_df(dir.list, function(dir_name) {
# List all files in the current directory
files.import <- list.files(here(folder_path, dir_name))
map_df(files.import, function(file_name) {
# Read the Excel file
temp <- suppressMessages(read_excel(here(folder_path, dir_name, file_name), range = cell_cols("J:O"))) %>%
# Clean and transform the data
slice(-c(1, 2)) %>%                   # Remove the first two rows
select(-2) %>%                        # Remove the second column
mutate(across(2:5, as.numeric),      # Convert columns 2 to 5 to numeric
t = seconds(times(t)) + (minutes(times(t)) * 60),  # Convert time to seconds
Sub = dir_name,               # Assign Sub id
trial = ifelse(nchar(file_name) < 16, "rest",
# Assign trial id below by concatening diff pieces of info
paste("trial", as.numeric(substr(file_name, nchar(file_name) - 5, nchar(file_name) - 5)))))
return(temp)
})
})
# Now data.all contains all the processed data
head(data.all)
dim(data.all)
#Visualize raw data by subject
ggplot(data.all,aes(x=t,y=VO2,color=trial))+
geom_point()+
geom_line()+
facet_wrap(~Sub) + theme_wsj() + thm
#Visualize raw data by subject
ggplot(data.all,aes(x=t,y=VO2,color=trial))+
geom_point()+
geom_line()+
facet_wrap(~Sub) + theme_wsj()
#Visualize data using loess by subject
ggplot(data.all,aes(x=t,y=VO2,color=trial))+
geom_smooth(method = 'loess', formula = 'y~x')+
facet_wrap(~Sub) + theme_wsj()
#create a color gradient
colfunc <- colorRampPalette(c("orange", "purple"))
#Visualize each trial across all participants
ggplot(data.all,aes(x=t,y=VO2,color=trial))+
geom_smooth(method = 'loess', formula = 'y~x')+
scale_colour_manual(values = c(colfunc(7))) + theme_wsj()
rm(list=ls())
ReqdLibs = c("here","purrr","readxl","Hmisc","chron","ggplot2","ggthemes","dplyr")
invisible(lapply(ReqdLibs, library, character.only = TRUE))
folder_path = here("Materials/Week 2/R project", "Raw Data")
# output the folder name
print(folder_path)
# make sure it exists
dir.exists(folder_path)
subfolder_path = here(folder_path,'Sub1')
files.test=list.files(subfolder_path)
files.test
#Let's read in one file to see how ugly the data are
temp0=suppressMessages(read_excel(here(subfolder_path,files.test[1]),))
head(temp0)
temp=suppressMessages(read_excel(here(subfolder_path,files.test[1]),range = cell_cols("J:O")))
head(temp)
# the first two rows are header-like information so remove it
temp=temp[-c(1,2),-2]
head(temp)
dir.list = dir(folder_path)
dir.list
data.all = data.frame(list())
# METHOD 1: For loop
for(i in 1:length(dir.list)){
files.import=list.files(here(folder_path,dir.list[i]))
for(j in 1:length(files.import)){
#Give me only the rows I need
temp=suppressMessages(read_excel(here(folder_path,dir.list[i],files.import[j]),
range = cell_cols("J:O")))
#Remove the random stuff
temp=temp[-c(1,2),-2]
#Convert to numeric
temp[,c(2:5)]=apply(temp[,c(2:5)],2,as.numeric)
#Covert to seconds
temp$t=seconds(times(temp$t))+(minutes(times(temp$t))*60)
#Assign Sub id
temp$Sub=dir.list[i]
#Assign trial id
if(nchar(files.import[j])<16){
temp$trial="rest"
}else{
temp$trial=paste("trial",as.numeric(substr(files.import[j],nchar(files.import[j])-5,nchar(files.import[j])-5)))
}
# this final step is where the 'stacking' happens
data.all=rbind(data.all,temp)
}
}
View(data.all)
# Compute the correlation matrix
#Assign matrix of just rho (r)
cor_matrix <- rcorr(as.matrix(data),type = "pearson")$r
#Custom method for correlation matrix
library(ggplot2)
library(reshape2)
library(Hmisc)
library(grid)
# Example: Using the mtcars dataset
data(mtcars)
data=mtcars
pairs(data)
# Compute the correlation matrix
#Assign matrix of just rho (r)
cor_matrix <- rcorr(as.matrix(data),type = "pearson")$r
n_matrix <- rcorr(as.matrix(data),type = "pearson")$n
#Just get the lower triangle of matrix and replace with NA
cor_matrix[lower.tri(cor_matrix,diag = F)] <- NA
n_matrix[lower.tri(n_matrix,diag = F)] <- NA
#Assign matrix of just p-values (P)
p_matrix <- rcorr(as.matrix(data),type = "pearson")$P
#Have NA values be less than .001, NAs represent correlation along the diagonal
p_matrix[is.na(p_matrix)]=.0000001
#Just get the lower triangle of matrix and replace with NA
p_matrix[lower.tri(p_matrix,diag = F)] <- NA
# Melt the correlation matrix for ggplot
melted_cor <- melt(cor_matrix,na.rm = T) #pivot correlations to long format
melted_p = melt(p_matrix,na.rm = T) #pivot p-values to long format
melted_n = melt(n_matrix,na.rm = T)
#P-value adjustment using a false discovery rate correction
melted_cor$p=p.adjust(melted_p$value,method = 'fdr',n=length(melted_p$value))
#Assign symbol dependent on significance level: ns = , <.05 = *, <.01 = **, <.001 = ***
melted_cor$psig=""
melted_cor$psig[melted_cor$p<.05]="*"
melted_cor$psig[melted_cor$p<.01]="**"
melted_cor$psig[melted_cor$p<.001]="***"
melted_cor$n=melted_n$value
#This code creates a subplot within the heatmap to guide a reader on what each
#element within the individuals tiles in the heatmap
legend_plot <- ggplot() +
geom_tile(aes(x = .5, y = .5), fill = "white", color = "black", width = 2, height = 1.5) +  # Create the tile
geom_text(aes(x = .5, y = .5),size=3, label = "Tile Guide:\nSymbol = FDR P-value\nNumber = Correlation\n(N = Sample Size)") +
theme_void()  # Remove all background elements
legend_plot
# Create a heatmap using ggplot2
#Var1 and Var2 are variable names in the correlation matrix, value is the rho
ggplot(melted_cor, aes(x=Var1, y=Var2, fill = value)) +
geom_tile(color = "white") + #border of tiles are white
#VJUST AND HJUST ARGUEMENTS FOR TEXT WILL NEED TO BE ADJUSTED FOR GRAPH SIZE
geom_text(aes(label = round(value,2)), vjust = 1) + #Insert rho value as label for corresponding tile
geom_text(aes(label = psig), vjust = .25,size=5) + #Insert p-adjusted value as label for corresponding tile
geom_text(aes(label = paste("(N = ",n,")")),vjust=2.65,size=3)+
scale_fill_gradient2(low = "purple2", mid = "white", high = "orange",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") + #Customize tile color and gradient and rename legend title to "Correlation"
theme_classic() + #Have blank space be white
theme(axis.text.x = element_text(angle = 45, hjust = 1), #rotate x axis variables names by 45 degrees
axis.text.y = element_text(angle = 45, hjust = 1))+ #rotate y axis variables names by 45 degrees
labs(caption = "P-values are FDR corrected\n<.05 = *, <.01 = **, <.001 = ***")+ #Insert caption at bottom of graph
xlab("")+ #Remove x axis title
ylab("")+ #Remove y axis title
ggtitle("Correlation Matrix")+ #Add title
scale_y_discrete(limits=rev)+ #Reverse order so base of triangle is in bottom left
annotation_custom(grob = ggplotGrob(legend_plot), xmin = 7.5, xmax = 10, ymin = 7.5, ymax = 10)
cl
